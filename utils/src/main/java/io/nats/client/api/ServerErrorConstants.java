// Copyright (c) 2025 Synadia Communications Inc. All Rights Reserved.
// See LICENSE and NOTICE file for details.

// GENERATED 10/10/2025

package io.nats.client.api;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

public final class ServerErrorConstants {
    public static final Map<Integer, Error> ERROR_BY_API_ERROR_CODE;

    public static final Error JSAccountResourcesExceededErr = new Error(400, 10002, "resource limits exceeded for account");
    public static final Error JSBadRequestErr = new Error(400, 10003, "bad request");
    public static final Error JSClusterIncompleteErr = new Error(503, 10004, "incomplete results");
    public static final Error JSClusterNoPeersErrF = new Error(400, 10005, "{err}");
    public static final Error JSClusterNotActiveErr = new Error(500, 10006, "JetStream not in clustered mode");
    public static final Error JSClusterNotAssignedErr = new Error(500, 10007, "JetStream cluster not assigned to this server");
    public static final Error JSClusterNotAvailErr = new Error(503, 10008, "JetStream system temporarily unavailable");
    public static final Error JSClusterNotLeaderErr = new Error(500, 10009, "JetStream cluster can not handle request");
    public static final Error JSClusterRequiredErr = new Error(503, 10010, "JetStream clustering support required");
    public static final Error JSClusterTagsErr = new Error(400, 10011, "tags placement not supported for operation");
    public static final Error JSConsumerCreateErrF = new Error(500, 10012, "{err}");
    public static final Error JSConsumerNameExistErr = new Error(400, 10013, "consumer name already in use");
    public static final Error JSConsumerNotFoundErr = new Error(404, 10014, "consumer not found");
    public static final Error JSSnapshotDeliverSubjectInvalidErr = new Error(400, 10015, "deliver subject not valid");
    public static final Error JSConsumerDurableNameNotInSubjectErr = new Error(400, 10016, "consumer expected to be durable but no durable name set in subject");
    public static final Error JSConsumerDurableNameNotMatchSubjectErr = new Error(400, 10017, "consumer name in subject does not match durable name in request");
    public static final Error JSConsumerDurableNameNotSetErr = new Error(400, 10018, "consumer expected to be durable but a durable name was not set");
    public static final Error JSConsumerEphemeralWithDurableInSubjectErr = new Error(400, 10019, "consumer expected to be ephemeral but detected a durable name set in subject");
    public static final Error JSConsumerEphemeralWithDurableNameErr = new Error(400, 10020, "consumer expected to be ephemeral but a durable name was set in request");
    public static final Error JSStreamExternalApiOverlapErrF = new Error(400, 10021, "stream external api prefix {prefix} must not overlap with {subject}");
    public static final Error JSStreamExternalDelPrefixOverlapsErrF = new Error(400, 10022, "stream external delivery prefix {prefix} overlaps with stream subject {subject}");
    public static final Error JSInsufficientResourcesErr = new Error(503, 10023, "insufficient resources");
    public static final Error JSStreamInvalidExternalDeliverySubjErrF = new Error(400, 10024, "stream external delivery prefix {prefix} must not contain wildcards");
    public static final Error JSInvalidJSONErr = new Error(400, 10025, "invalid JSON: {err}");
    public static final Error JSMaximumConsumersLimitErr = new Error(400, 10026, "maximum consumers limit reached");
    public static final Error JSMaximumStreamsLimitErr = new Error(400, 10027, "maximum number of streams reached");
    public static final Error JSMemoryResourcesExceededErr = new Error(500, 10028, "insufficient memory resources available");
    public static final Error JSMirrorConsumerSetupFailedErrF = new Error(500, 10029, "{err}");
    public static final Error JSMirrorMaxMessageSizeTooBigErr = new Error(400, 10030, "stream mirror must have max message size >= source");
    public static final Error JSMirrorWithSourcesErr = new Error(400, 10031, "stream mirrors can not also contain other sources");
    public static final Error JSMirrorWithStartSeqAndTimeErr = new Error(400, 10032, "stream mirrors can not have both start seq and start time configured");
    public static final Error JSMirrorWithSubjectFiltersErr = new Error(400, 10033, "stream mirrors can not contain filtered subjects");
    public static final Error JSMirrorWithSubjectsErr = new Error(400, 10034, "stream mirrors can not contain subjects");
    public static final Error JSNoAccountErr = new Error(503, 10035, "account not found");
    public static final Error JSClusterUnSupportFeatureErr = new Error(503, 10036, "not currently supported in clustered mode");
    public static final Error JSNoMessageFoundErr = new Error(404, 10037, "no message found");
    public static final Error JSNotEmptyRequestErr = new Error(400, 10038, "expected an empty request payload");
    public static final Error JSNotEnabledForAccountErr = new Error(503, 10039, "JetStream not enabled for account");
    public static final Error JSClusterPeerNotMemberErr = new Error(400, 10040, "peer not a member");
    public static final Error JSRaftGeneralErrF = new Error(500, 10041, "{err}");
    public static final Error JSRestoreSubscribeFailedErrF = new Error(500, 10042, "JetStream unable to subscribe to restore snapshot {subject}: {err}");
    public static final Error JSSequenceNotFoundErrF = new Error(400, 10043, "sequence {seq} not found");
    public static final Error JSClusterServerNotMemberErr = new Error(400, 10044, "server is not a member of the cluster");
    public static final Error JSSourceConsumerSetupFailedErrF = new Error(500, 10045, "{err}");
    public static final Error JSSourceMaxMessageSizeTooBigErr = new Error(400, 10046, "stream source must have max message size >= target");
    public static final Error JSStorageResourcesExceededErr = new Error(500, 10047, "insufficient storage resources available");
    public static final Error JSStreamAssignmentErrF = new Error(500, 10048, "{err}");
    public static final Error JSStreamCreateErrF = new Error(500, 10049, "{err}");
    public static final Error JSStreamDeleteErrF = new Error(500, 10050, "{err}");
    public static final Error JSStreamGeneralErrorF = new Error(500, 10051, "{err}");
    public static final Error JSStreamInvalidConfigF = new Error(500, 10052, "{err}");
    public static final Error JSStreamLimitsErrF = new Error(500, 10053, "{err}");
    public static final Error JSStreamMessageExceedsMaximumErr = new Error(400, 10054, "message size exceeds maximum allowed");
    public static final Error JSStreamMirrorNotUpdatableErr = new Error(400, 10055, "stream mirror configuration can not be updated");
    public static final Error JSStreamMismatchErr = new Error(400, 10056, "stream name in subject does not match request");
    public static final Error JSStreamMsgDeleteFailedF = new Error(500, 10057, "{err}");
    public static final Error JSStreamNameExistErr = new Error(400, 10058, "stream name already in use with a different configuration");
    public static final Error JSStreamNotFoundErr = new Error(404, 10059, "stream not found");
    public static final Error JSStreamNotMatchErr = new Error(400, 10060, "expected stream does not match");
    public static final Error JSStreamReplicasNotUpdatableErr = new Error(400, 10061, "Replicas configuration can not be updated");
    public static final Error JSStreamRestoreErrF = new Error(500, 10062, "restore failed: {err}");
    public static final Error JSStreamSequenceNotMatchErr = new Error(503, 10063, "expected stream sequence does not match");
    public static final Error JSStreamSnapshotErrF = new Error(500, 10064, "snapshot failed: {err}");
    public static final Error JSStreamSubjectOverlapErr = new Error(400, 10065, "subjects overlap with an existing stream");
    public static final Error JSStreamTemplateCreateErrF = new Error(500, 10066, "{err}");
    public static final Error JSStreamTemplateDeleteErrF = new Error(500, 10067, "{err}");
    public static final Error JSStreamTemplateNotFoundErr = new Error(404, 10068, "template not found");
    public static final Error JSStreamUpdateErrF = new Error(500, 10069, "{err}");
    public static final Error JSStreamWrongLastMsgIDErrF = new Error(400, 10070, "wrong last msg ID: {id}");
    public static final Error JSStreamWrongLastSequenceErrF = new Error(400, 10071, "wrong last sequence: {seq}");
    public static final Error JSTempStorageFailedErr = new Error(500, 10072, "JetStream unable to open temp storage for restore");
    public static final Error JSTemplateNameNotMatchSubjectErr = new Error(400, 10073, "template name in subject does not match request");
    public static final Error JSStreamReplicasNotSupportedErr = new Error(500, 10074, "replicas > 1 not supported in non-clustered mode");
    public static final Error JSPeerRemapErr = new Error(503, 10075, "peer remap failed");
    public static final Error JSNotEnabledErr = new Error(503, 10076, "JetStream not enabled");
    public static final Error JSStreamStoreFailedF = new Error(503, 10077, "{err}");
    public static final Error JSConsumerConfigRequiredErr = new Error(400, 10078, "consumer config required");
    public static final Error JSConsumerDeliverToWildcardsErr = new Error(400, 10079, "consumer deliver subject has wildcards");
    public static final Error JSConsumerPushMaxWaitingErr = new Error(400, 10080, "consumer in push mode can not set max waiting");
    public static final Error JSConsumerDeliverCycleErr = new Error(400, 10081, "consumer deliver subject forms a cycle");
    public static final Error JSConsumerMaxPendingAckPolicyRequiredErr = new Error(400, 10082, "consumer requires ack policy for max ack pending");
    public static final Error JSConsumerSmallHeartbeatErr = new Error(400, 10083, "consumer idle heartbeat needs to be >= 100ms");
    public static final Error JSConsumerPullRequiresAckErr = new Error(400, 10084, "consumer in pull mode requires explicit ack policy on workqueue stream");
    public static final Error JSConsumerPullNotDurableErr = new Error(400, 10085, "consumer in pull mode requires a durable name");
    public static final Error JSConsumerPullWithRateLimitErr = new Error(400, 10086, "consumer in pull mode can not have rate limit set");
    public static final Error JSConsumerMaxWaitingNegativeErr = new Error(400, 10087, "consumer max waiting needs to be positive");
    public static final Error JSConsumerHBRequiresPushErr = new Error(400, 10088, "consumer idle heartbeat requires a push based consumer");
    public static final Error JSConsumerFCRequiresPushErr = new Error(400, 10089, "consumer flow control requires a push based consumer");
    public static final Error JSConsumerDirectRequiresPushErr = new Error(400, 10090, "consumer direct requires a push based consumer");
    public static final Error JSConsumerDirectRequiresEphemeralErr = new Error(400, 10091, "consumer direct requires an ephemeral consumer");
    public static final Error JSConsumerOnMappedErr = new Error(400, 10092, "consumer direct on a mapped consumer");
    public static final Error JSConsumerFilterNotSubsetErr = new Error(400, 10093, "consumer filter subject is not a valid subset of the interest subjects");
    public static final Error JSConsumerInvalidPolicyErrF = new Error(400, 10094, "{err}");
    public static final Error JSConsumerInvalidSamplingErrF = new Error(400, 10095, "failed to parse consumer sampling configuration: {err}");
    public static final Error JSStreamInvalidErr = new Error(500, 10096, "stream not valid");
    public static final Error JSStreamHeaderExceedsMaximumErr = new Error(400, 10097, "header size exceeds maximum allowed of 64k");
    public static final Error JSConsumerWQRequiresExplicitAckErr = new Error(400, 10098, "workqueue stream requires explicit ack");
    public static final Error JSConsumerWQMultipleUnfilteredErr = new Error(400, 10099, "multiple non-filtered consumers not allowed on workqueue stream");
    public static final Error JSConsumerWQConsumerNotUniqueErr = new Error(400, 10100, "filtered consumer not unique on workqueue stream");
    public static final Error JSConsumerWQConsumerNotDeliverAllErr = new Error(400, 10101, "consumer must be deliver all on workqueue stream");
    public static final Error JSConsumerNameTooLongErrF = new Error(400, 10102, "consumer name is too long, maximum allowed is {max}");
    public static final Error JSConsumerBadDurableNameErr = new Error(400, 10103, "durable name can not contain '.', '*', '>'");
    public static final Error JSConsumerStoreFailedErrF = new Error(500, 10104, "error creating store for consumer: {err}");
    public static final Error JSConsumerExistingActiveErr = new Error(400, 10105, "consumer already exists and is still active");
    public static final Error JSConsumerReplacementWithDifferentNameErr = new Error(400, 10106, "consumer replacement durable config not the same");
    public static final Error JSConsumerDescriptionTooLongErrF = new Error(400, 10107, "consumer description is too long, maximum allowed is {max}");
    public static final Error JSConsumerWithFlowControlNeedsHeartbeats = new Error(400, 10108, "consumer with flow control also needs heartbeats");
    public static final Error JSStreamSealedErr = new Error(400, 10109, "invalid operation on sealed stream");
    public static final Error JSStreamPurgeFailedF = new Error(500, 10110, "{err}");
    public static final Error JSStreamRollupFailedF = new Error(500, 10111, "{err}");
    public static final Error JSConsumerInvalidDeliverSubject = new Error(400, 10112, "invalid push consumer deliver subject");
    public static final Error JSStreamMaxBytesRequired = new Error(400, 10113, "account requires a stream config to have max bytes set");
    public static final Error JSConsumerMaxRequestBatchNegativeErr = new Error(400, 10114, "consumer max request batch needs to be > 0");
    public static final Error JSConsumerMaxRequestExpiresTooSmall = new Error(400, 10115, "consumer max request expires needs to be >= 1ms");
    public static final Error JSConsumerMaxDeliverBackoffErr = new Error(400, 10116, "max deliver is required to be > length of backoff values");
    public static final Error JSStreamInfoMaxSubjectsErr = new Error(500, 10117, "subject details would exceed maximum allowed");
    public static final Error JSStreamOfflineErr = new Error(500, 10118, "stream is offline");
    public static final Error JSConsumerOfflineErr = new Error(500, 10119, "consumer is offline");
    public static final Error JSNoLimitsErr = new Error(400, 10120, "no JetStream default or applicable tiered limit present");
    public static final Error JSConsumerMaxPendingAckExcessErrF = new Error(400, 10121, "consumer max ack pending exceeds system limit of {limit}");
    public static final Error JSStreamMaxStreamBytesExceeded = new Error(400, 10122, "stream max bytes exceeds account limit max stream bytes");
    public static final Error JSStreamMoveAndScaleErr = new Error(400, 10123, "can not move and scale a stream in a single update");
    public static final Error JSStreamMoveInProgressF = new Error(400, 10124, "stream move already in progress: {msg}");
    public static final Error JSConsumerMaxRequestBatchExceededF = new Error(400, 10125, "consumer max request batch exceeds server limit of {limit}");
    public static final Error JSConsumerReplicasExceedsStream = new Error(400, 10126, "consumer config replica count exceeds parent stream");
    public static final Error JSConsumerNameContainsPathSeparatorsErr = new Error(400, 10127, "Consumer name can not contain path separators");
    public static final Error JSStreamNameContainsPathSeparatorsErr = new Error(400, 10128, "Stream name can not contain path separators");
    public static final Error JSStreamMoveNotInProgress = new Error(400, 10129, "stream move not in progress");
    public static final Error JSStreamNameExistRestoreFailedErr = new Error(400, 10130, "stream name already in use, cannot restore");
    public static final Error JSConsumerCreateFilterSubjectMismatchErr = new Error(400, 10131, "Consumer create request did not match filtered subject from create subject");
    public static final Error JSConsumerCreateDurableAndNameMismatch = new Error(400, 10132, "Consumer Durable and Name have to be equal if both are provided");
    public static final Error JSReplicasCountCannotBeNegative = new Error(400, 10133, "replicas count cannot be negative");
    public static final Error JSConsumerReplicasShouldMatchStream = new Error(400, 10134, "consumer config replicas must match interest retention stream's replicas");
    public static final Error JSConsumerMetadataLengthErrF = new Error(400, 10135, "consumer metadata exceeds maximum size of {limit}");
    public static final Error JSConsumerDuplicateFilterSubjects = new Error(400, 10136, "consumer cannot have both FilterSubject and FilterSubjects specified");
    public static final Error JSConsumerMultipleFiltersNotAllowed = new Error(400, 10137, "consumer with multiple subject filters cannot use subject based API");
    public static final Error JSConsumerOverlappingSubjectFilters = new Error(400, 10138, "consumer subject filters cannot overlap");
    public static final Error JSConsumerEmptyFilter = new Error(400, 10139, "consumer filter in FilterSubjects cannot be empty");
    public static final Error JSSourceDuplicateDetected = new Error(400, 10140, "duplicate source configuration detected");
    public static final Error JSSourceInvalidStreamName = new Error(400, 10141, "sourced stream name is invalid");
    public static final Error JSMirrorInvalidStreamName = new Error(400, 10142, "mirrored stream name is invalid");
    public static final Error JSMirrorWithFirstSeqErr = new Error(400, 10143, "stream mirrors can not have first sequence configured");
    public static final Error JSSourceMultipleFiltersNotAllowed = new Error(400, 10144, "source with multiple subject transforms cannot also have a single subject filter");
    public static final Error JSSourceInvalidSubjectFilter = new Error(400, 10145, "source transform source: {err}");
    public static final Error JSSourceInvalidTransformDestination = new Error(400, 10146, "source transform: {err}");
    public static final Error JSSourceOverlappingSubjectFilters = new Error(400, 10147, "source filters can not overlap");
    public static final Error JSConsumerAlreadyExists = new Error(400, 10148, "consumer already exists");
    public static final Error JSConsumerDoesNotExist = new Error(400, 10149, "consumer does not exist");
    public static final Error JSMirrorMultipleFiltersNotAllowed = new Error(400, 10150, "mirror with multiple subject transforms cannot also have a single subject filter");
    public static final Error JSMirrorInvalidSubjectFilter = new Error(400, 10151, "mirror transform source: {err}");
    public static final Error JSMirrorOverlappingSubjectFilters = new Error(400, 10152, "mirror subject filters can not overlap");
    public static final Error JSConsumerInactiveThresholdExcess = new Error(400, 10153, "consumer inactive threshold exceeds system limit of {limit}");
    public static final Error JSMirrorInvalidTransformDestination = new Error(400, 10154, "mirror transform: {err}");
    public static final Error JSStreamTransformInvalidSource = new Error(400, 10155, "stream transform source: {err}");
    public static final Error JSStreamTransformInvalidDestination = new Error(400, 10156, "stream transform: {err}");
    public static final Error JSPedanticErrF = new Error(400, 10157, "pedantic mode: {err}");
    public static final Error JSStreamDuplicateMessageConflict = new Error(409, 10158, "duplicate message id is in process");
    public static final Error JSConsumerPriorityPolicyWithoutGroup = new Error(400, 10159, "Setting PriorityPolicy requires at least one PriorityGroup to be set");
    public static final Error JSConsumerInvalidPriorityGroupErr = new Error(400, 10160, "Provided priority group does not exist for this consumer");
    public static final Error JSConsumerEmptyGroupName = new Error(400, 10161, "Group name cannot be an empty string");
    public static final Error JSConsumerInvalidGroupNameErr = new Error(400, 10162, "Valid priority group name must match A-Z, a-z, 0-9, -_/=)+ and may not exceed 16 characters");
    public static final Error JSStreamExpectedLastSeqPerSubjectNotReady = new Error(503, 10163, "expected last sequence per subject temporarily unavailable");
    public static final Error JSStreamWrongLastSequenceConstantErr = new Error(400, 10164, "wrong last sequence");
    public static final Error JSMessageTTLInvalidErr = new Error(400, 10165, "invalid per-message TTL");
    public static final Error JSMessageTTLDisabledErr = new Error(400, 10166, "per-message TTL is disabled");
    public static final Error JSStreamTooManyRequests = new Error(429, 10167, "too many requests");
    public static final Error JSMessageIncrDisabledErr = new Error(400, 10168, "message counters is disabled");
    public static final Error JSMessageIncrMissingErr = new Error(400, 10169, "message counter increment is missing");
    public static final Error JSMessageIncrPayloadErr = new Error(400, 10170, "message counter has payload");
    public static final Error JSMessageIncrInvalidErr = new Error(400, 10171, "message counter increment is invalid");
    public static final Error JSMessageCounterBrokenErr = new Error(400, 10172, "message counter is broken");
    public static final Error JSMirrorWithCountersErr = new Error(400, 10173, "stream mirrors can not also calculate counters");
    public static final Error JSAtomicPublishDisabledErr = new Error(400, 10174, "atomic publish is disabled");
    public static final Error JSAtomicPublishMissingSeqErr = new Error(400, 10175, "atomic publish sequence is missing");
    public static final Error JSAtomicPublishIncompleteBatchErr = new Error(400, 10176, "atomic publish batch is incomplete");
    public static final Error JSAtomicPublishUnsupportedHeaderBatchErr = new Error(400, 10177, "atomic publish unsupported header used: {header}");
    public static final Error JSConsumerPushWithPriorityGroupErr = new Error(400, 10178, "priority groups can not be used with push consumers");
    public static final Error JSAtomicPublishInvalidBatchIDErr = new Error(400, 10179, "atomic publish batch ID is invalid");
    public static final Error JSStreamMinLastSeqErr = new Error(412, 10180, "min last sequence");
    public static final Error JSConsumerAckPolicyInvalidErr = new Error(400, 10181, "consumer ack policy invalid");
    public static final Error JSConsumerReplayPolicyInvalidErr = new Error(400, 10182, "consumer replay policy invalid");
    public static final Error JSConsumerAckWaitNegativeErr = new Error(400, 10183, "consumer ack wait needs to be positive");
    public static final Error JSConsumerBackOffNegativeErr = new Error(400, 10184, "consumer backoff needs to be positive");
    public static final Error JSRequiredApiLevelErr = new Error(412, 10185, "JetStream minimum api level required");
    public static final Error JSMirrorWithMsgSchedulesErr = new Error(400, 10186, "stream mirrors can not also schedule messages");
    public static final Error JSSourceWithMsgSchedulesErr = new Error(400, 10187, "stream source can not also schedule messages");
    public static final Error JSMessageSchedulesDisabledErr = new Error(400, 10188, "message schedules is disabled");
    public static final Error JSMessageSchedulesPatternInvalidErr = new Error(400, 10189, "message schedules pattern is invalid");
    public static final Error JSMessageSchedulesTargetInvalidErr = new Error(400, 10190, "message schedules target is invalid");
    public static final Error JSMessageSchedulesTTLInvalidErr = new Error(400, 10191, "message schedules invalid per-message TTL");
    public static final Error JSMessageSchedulesRollupInvalidErr = new Error(400, 10192, "message schedules invalid rollup");
    public static final Error JSStreamExpectedLastSeqPerSubjectInvalid = new Error(400, 10193, "missing sequence for expected last sequence per subject");
    public static final Error JSStreamOfflineReasonErrF = new Error(500, 10194, "stream is offline: {err}");
    public static final Error JSConsumerOfflineReasonErrF = new Error(500, 10195, "consumer is offline: {err}");
    public static final Error JSConsumerPriorityGroupWithPolicyNone = new Error(400, 10196, "consumer can not have priority groups when policy is none");
    public static final Error JSConsumerPinnedTTLWithoutPriorityPolicyNone = new Error(400, 10197, "PinnedTTL cannot be set when PriorityPolicy is none");
    public static final Error JSMirrorWithAtomicPublishErr = new Error(400, 10198, "stream mirrors can not also use atomic publishing");
    public static final Error JSAtomicPublishTooLargeBatchErrF = new Error(400, 10199, "atomic publish batch is too large: {size}");
    public static final Error JSAtomicPublishInvalidBatchCommitErr = new Error(400, 10200, "atomic publish batch commit is invalid");
    public static final Error JSAtomicPublishContainsDuplicateMessageErr = new Error(400, 10201, "atomic publish batch contains duplicate message id");

    static {
        Map<Integer, Error> temp = new HashMap<>();
        temp.put(10002, JSAccountResourcesExceededErr);
        temp.put(10003, JSBadRequestErr);
        temp.put(10004, JSClusterIncompleteErr);
        temp.put(10005, JSClusterNoPeersErrF);
        temp.put(10006, JSClusterNotActiveErr);
        temp.put(10007, JSClusterNotAssignedErr);
        temp.put(10008, JSClusterNotAvailErr);
        temp.put(10009, JSClusterNotLeaderErr);
        temp.put(10010, JSClusterRequiredErr);
        temp.put(10011, JSClusterTagsErr);
        temp.put(10012, JSConsumerCreateErrF);
        temp.put(10013, JSConsumerNameExistErr);
        temp.put(10014, JSConsumerNotFoundErr);
        temp.put(10015, JSSnapshotDeliverSubjectInvalidErr);
        temp.put(10016, JSConsumerDurableNameNotInSubjectErr);
        temp.put(10017, JSConsumerDurableNameNotMatchSubjectErr);
        temp.put(10018, JSConsumerDurableNameNotSetErr);
        temp.put(10019, JSConsumerEphemeralWithDurableInSubjectErr);
        temp.put(10020, JSConsumerEphemeralWithDurableNameErr);
        temp.put(10021, JSStreamExternalApiOverlapErrF);
        temp.put(10022, JSStreamExternalDelPrefixOverlapsErrF);
        temp.put(10023, JSInsufficientResourcesErr);
        temp.put(10024, JSStreamInvalidExternalDeliverySubjErrF);
        temp.put(10025, JSInvalidJSONErr);
        temp.put(10026, JSMaximumConsumersLimitErr);
        temp.put(10027, JSMaximumStreamsLimitErr);
        temp.put(10028, JSMemoryResourcesExceededErr);
        temp.put(10029, JSMirrorConsumerSetupFailedErrF);
        temp.put(10030, JSMirrorMaxMessageSizeTooBigErr);
        temp.put(10031, JSMirrorWithSourcesErr);
        temp.put(10032, JSMirrorWithStartSeqAndTimeErr);
        temp.put(10033, JSMirrorWithSubjectFiltersErr);
        temp.put(10034, JSMirrorWithSubjectsErr);
        temp.put(10035, JSNoAccountErr);
        temp.put(10036, JSClusterUnSupportFeatureErr);
        temp.put(10037, JSNoMessageFoundErr);
        temp.put(10038, JSNotEmptyRequestErr);
        temp.put(10039, JSNotEnabledForAccountErr);
        temp.put(10040, JSClusterPeerNotMemberErr);
        temp.put(10041, JSRaftGeneralErrF);
        temp.put(10042, JSRestoreSubscribeFailedErrF);
        temp.put(10043, JSSequenceNotFoundErrF);
        temp.put(10044, JSClusterServerNotMemberErr);
        temp.put(10045, JSSourceConsumerSetupFailedErrF);
        temp.put(10046, JSSourceMaxMessageSizeTooBigErr);
        temp.put(10047, JSStorageResourcesExceededErr);
        temp.put(10048, JSStreamAssignmentErrF);
        temp.put(10049, JSStreamCreateErrF);
        temp.put(10050, JSStreamDeleteErrF);
        temp.put(10051, JSStreamGeneralErrorF);
        temp.put(10052, JSStreamInvalidConfigF);
        temp.put(10053, JSStreamLimitsErrF);
        temp.put(10054, JSStreamMessageExceedsMaximumErr);
        temp.put(10055, JSStreamMirrorNotUpdatableErr);
        temp.put(10056, JSStreamMismatchErr);
        temp.put(10057, JSStreamMsgDeleteFailedF);
        temp.put(10058, JSStreamNameExistErr);
        temp.put(10059, JSStreamNotFoundErr);
        temp.put(10060, JSStreamNotMatchErr);
        temp.put(10061, JSStreamReplicasNotUpdatableErr);
        temp.put(10062, JSStreamRestoreErrF);
        temp.put(10063, JSStreamSequenceNotMatchErr);
        temp.put(10064, JSStreamSnapshotErrF);
        temp.put(10065, JSStreamSubjectOverlapErr);
        temp.put(10066, JSStreamTemplateCreateErrF);
        temp.put(10067, JSStreamTemplateDeleteErrF);
        temp.put(10068, JSStreamTemplateNotFoundErr);
        temp.put(10069, JSStreamUpdateErrF);
        temp.put(10070, JSStreamWrongLastMsgIDErrF);
        temp.put(10071, JSStreamWrongLastSequenceErrF);
        temp.put(10072, JSTempStorageFailedErr);
        temp.put(10073, JSTemplateNameNotMatchSubjectErr);
        temp.put(10074, JSStreamReplicasNotSupportedErr);
        temp.put(10075, JSPeerRemapErr);
        temp.put(10076, JSNotEnabledErr);
        temp.put(10077, JSStreamStoreFailedF);
        temp.put(10078, JSConsumerConfigRequiredErr);
        temp.put(10079, JSConsumerDeliverToWildcardsErr);
        temp.put(10080, JSConsumerPushMaxWaitingErr);
        temp.put(10081, JSConsumerDeliverCycleErr);
        temp.put(10082, JSConsumerMaxPendingAckPolicyRequiredErr);
        temp.put(10083, JSConsumerSmallHeartbeatErr);
        temp.put(10084, JSConsumerPullRequiresAckErr);
        temp.put(10085, JSConsumerPullNotDurableErr);
        temp.put(10086, JSConsumerPullWithRateLimitErr);
        temp.put(10087, JSConsumerMaxWaitingNegativeErr);
        temp.put(10088, JSConsumerHBRequiresPushErr);
        temp.put(10089, JSConsumerFCRequiresPushErr);
        temp.put(10090, JSConsumerDirectRequiresPushErr);
        temp.put(10091, JSConsumerDirectRequiresEphemeralErr);
        temp.put(10092, JSConsumerOnMappedErr);
        temp.put(10093, JSConsumerFilterNotSubsetErr);
        temp.put(10094, JSConsumerInvalidPolicyErrF);
        temp.put(10095, JSConsumerInvalidSamplingErrF);
        temp.put(10096, JSStreamInvalidErr);
        temp.put(10097, JSStreamHeaderExceedsMaximumErr);
        temp.put(10098, JSConsumerWQRequiresExplicitAckErr);
        temp.put(10099, JSConsumerWQMultipleUnfilteredErr);
        temp.put(10100, JSConsumerWQConsumerNotUniqueErr);
        temp.put(10101, JSConsumerWQConsumerNotDeliverAllErr);
        temp.put(10102, JSConsumerNameTooLongErrF);
        temp.put(10103, JSConsumerBadDurableNameErr);
        temp.put(10104, JSConsumerStoreFailedErrF);
        temp.put(10105, JSConsumerExistingActiveErr);
        temp.put(10106, JSConsumerReplacementWithDifferentNameErr);
        temp.put(10107, JSConsumerDescriptionTooLongErrF);
        temp.put(10108, JSConsumerWithFlowControlNeedsHeartbeats);
        temp.put(10109, JSStreamSealedErr);
        temp.put(10110, JSStreamPurgeFailedF);
        temp.put(10111, JSStreamRollupFailedF);
        temp.put(10112, JSConsumerInvalidDeliverSubject);
        temp.put(10113, JSStreamMaxBytesRequired);
        temp.put(10114, JSConsumerMaxRequestBatchNegativeErr);
        temp.put(10115, JSConsumerMaxRequestExpiresTooSmall);
        temp.put(10116, JSConsumerMaxDeliverBackoffErr);
        temp.put(10117, JSStreamInfoMaxSubjectsErr);
        temp.put(10118, JSStreamOfflineErr);
        temp.put(10119, JSConsumerOfflineErr);
        temp.put(10120, JSNoLimitsErr);
        temp.put(10121, JSConsumerMaxPendingAckExcessErrF);
        temp.put(10122, JSStreamMaxStreamBytesExceeded);
        temp.put(10123, JSStreamMoveAndScaleErr);
        temp.put(10124, JSStreamMoveInProgressF);
        temp.put(10125, JSConsumerMaxRequestBatchExceededF);
        temp.put(10126, JSConsumerReplicasExceedsStream);
        temp.put(10127, JSConsumerNameContainsPathSeparatorsErr);
        temp.put(10128, JSStreamNameContainsPathSeparatorsErr);
        temp.put(10129, JSStreamMoveNotInProgress);
        temp.put(10130, JSStreamNameExistRestoreFailedErr);
        temp.put(10131, JSConsumerCreateFilterSubjectMismatchErr);
        temp.put(10132, JSConsumerCreateDurableAndNameMismatch);
        temp.put(10133, JSReplicasCountCannotBeNegative);
        temp.put(10134, JSConsumerReplicasShouldMatchStream);
        temp.put(10135, JSConsumerMetadataLengthErrF);
        temp.put(10136, JSConsumerDuplicateFilterSubjects);
        temp.put(10137, JSConsumerMultipleFiltersNotAllowed);
        temp.put(10138, JSConsumerOverlappingSubjectFilters);
        temp.put(10139, JSConsumerEmptyFilter);
        temp.put(10140, JSSourceDuplicateDetected);
        temp.put(10141, JSSourceInvalidStreamName);
        temp.put(10142, JSMirrorInvalidStreamName);
        temp.put(10143, JSMirrorWithFirstSeqErr);
        temp.put(10144, JSSourceMultipleFiltersNotAllowed);
        temp.put(10145, JSSourceInvalidSubjectFilter);
        temp.put(10146, JSSourceInvalidTransformDestination);
        temp.put(10147, JSSourceOverlappingSubjectFilters);
        temp.put(10148, JSConsumerAlreadyExists);
        temp.put(10149, JSConsumerDoesNotExist);
        temp.put(10150, JSMirrorMultipleFiltersNotAllowed);
        temp.put(10151, JSMirrorInvalidSubjectFilter);
        temp.put(10152, JSMirrorOverlappingSubjectFilters);
        temp.put(10153, JSConsumerInactiveThresholdExcess);
        temp.put(10154, JSMirrorInvalidTransformDestination);
        temp.put(10155, JSStreamTransformInvalidSource);
        temp.put(10156, JSStreamTransformInvalidDestination);
        temp.put(10157, JSPedanticErrF);
        temp.put(10158, JSStreamDuplicateMessageConflict);
        temp.put(10159, JSConsumerPriorityPolicyWithoutGroup);
        temp.put(10160, JSConsumerInvalidPriorityGroupErr);
        temp.put(10161, JSConsumerEmptyGroupName);
        temp.put(10162, JSConsumerInvalidGroupNameErr);
        temp.put(10163, JSStreamExpectedLastSeqPerSubjectNotReady);
        temp.put(10164, JSStreamWrongLastSequenceConstantErr);
        temp.put(10165, JSMessageTTLInvalidErr);
        temp.put(10166, JSMessageTTLDisabledErr);
        temp.put(10167, JSStreamTooManyRequests);
        temp.put(10168, JSMessageIncrDisabledErr);
        temp.put(10169, JSMessageIncrMissingErr);
        temp.put(10170, JSMessageIncrPayloadErr);
        temp.put(10171, JSMessageIncrInvalidErr);
        temp.put(10172, JSMessageCounterBrokenErr);
        temp.put(10173, JSMirrorWithCountersErr);
        temp.put(10174, JSAtomicPublishDisabledErr);
        temp.put(10175, JSAtomicPublishMissingSeqErr);
        temp.put(10176, JSAtomicPublishIncompleteBatchErr);
        temp.put(10177, JSAtomicPublishUnsupportedHeaderBatchErr);
        temp.put(10178, JSConsumerPushWithPriorityGroupErr);
        temp.put(10179, JSAtomicPublishInvalidBatchIDErr);
        temp.put(10180, JSStreamMinLastSeqErr);
        temp.put(10181, JSConsumerAckPolicyInvalidErr);
        temp.put(10182, JSConsumerReplayPolicyInvalidErr);
        temp.put(10183, JSConsumerAckWaitNegativeErr);
        temp.put(10184, JSConsumerBackOffNegativeErr);
        temp.put(10185, JSRequiredApiLevelErr);
        temp.put(10186, JSMirrorWithMsgSchedulesErr);
        temp.put(10187, JSSourceWithMsgSchedulesErr);
        temp.put(10188, JSMessageSchedulesDisabledErr);
        temp.put(10189, JSMessageSchedulesPatternInvalidErr);
        temp.put(10190, JSMessageSchedulesTargetInvalidErr);
        temp.put(10191, JSMessageSchedulesTTLInvalidErr);
        temp.put(10192, JSMessageSchedulesRollupInvalidErr);
        temp.put(10193, JSStreamExpectedLastSeqPerSubjectInvalid);
        temp.put(10194, JSStreamOfflineReasonErrF);
        temp.put(10195, JSConsumerOfflineReasonErrF);
        temp.put(10196, JSConsumerPriorityGroupWithPolicyNone);
        temp.put(10197, JSConsumerPinnedTTLWithoutPriorityPolicyNone);
        temp.put(10198, JSMirrorWithAtomicPublishErr);
        temp.put(10199, JSAtomicPublishTooLargeBatchErrF);
        temp.put(10200, JSAtomicPublishInvalidBatchCommitErr);
        temp.put(10201, JSAtomicPublishContainsDuplicateMessageErr);
        ERROR_BY_API_ERROR_CODE = Collections.unmodifiableMap(temp);
    }
}
